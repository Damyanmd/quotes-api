{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://react-prep-be2be-default-rtdb.europe-west1.firebasedatabase.app\";\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n  const transformedQuotes = [];\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    console.log(data);\n    transformedQuotes.push(quoteObj);\n  }\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  console.log(quoteId);\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n  console.log(response);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  console.log(loadedQuote.text);\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: \"POST\",\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n  const transformedComments = [];\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","console","log","push","getSingleQuote","quoteId","loadedQuote","text","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["C:/Users/User/OneDrive/Документи/Udemy code React/21-time-to-practice-starting-code/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN =\n  \"https://react-prep-be2be-default-rtdb.europe-west1.firebasedatabase.app\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n    console.log(data);\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  console.log(quoteId);\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n  console.log(loadedQuote.text);\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"AAAA,MAAMA,eAAe,GACnB,yEAAyE;AAE3E,OAAO,eAAeC,YAAY,GAAG;EACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAAa,CAAC;EAC9D,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,MAAMC,iBAAiB,GAAG,EAAE;EAE5B,KAAK,MAAMC,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAMO,QAAQ,GAAG;MACfC,EAAE,EAAEF,GAAG;MACP,GAAGN,IAAI,CAACM,GAAG;IACb,CAAC;IACDG,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;IAEjBK,iBAAiB,CAACM,IAAI,CAACJ,QAAQ,CAAC;EAClC;EAEA,OAAOF,iBAAiB;AAC1B;AAEA,OAAO,eAAeO,cAAc,CAACC,OAAO,EAAE;EAC5CJ,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;EACpB,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,WAAUiB,OAAQ,OAAM,CAAC;EACzE,MAAMb,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClCQ,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;EAErB,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,wBAAwB,CAAC;EAC3D;EAEA,MAAMU,WAAW,GAAG;IAClBN,EAAE,EAAEK,OAAO;IACX,GAAGb;EACL,CAAC;EACDS,OAAO,CAACC,GAAG,CAACI,WAAW,CAACC,IAAI,CAAC;EAE7B,OAAOD,WAAW;AACpB;AAEA,OAAO,eAAeE,QAAQ,CAACC,SAAS,EAAE;EACxC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAAa,EAAE;IAC7DsB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;IAC/BK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMtB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,eAAemB,UAAU,CAACC,WAAW,EAAE;EAC5C,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEH,eAAgB,aAAY4B,WAAW,CAACX,OAAQ,OAAM,EACzD;IACEK,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW,CAACC,WAAW,CAAC;IAC7CH,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CACF;EACD,MAAMtB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,wBAAwB,CAAC;EAC3D;EAEA,OAAO;IAAEsB,SAAS,EAAE1B,IAAI,CAAC2B;EAAK,CAAC;AACjC;AAEA,OAAO,eAAeC,cAAc,CAACf,OAAO,EAAE;EAC5C,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,aAAYiB,OAAQ,OAAM,CAAC;EAE3E,MAAMb,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,yBAAyB,CAAC;EAC5D;EAEA,MAAMyB,mBAAmB,GAAG,EAAE;EAE9B,KAAK,MAAMvB,GAAG,IAAIN,IAAI,EAAE;IACtB,MAAM8B,UAAU,GAAG;MACjBtB,EAAE,EAAEF,GAAG;MACP,GAAGN,IAAI,CAACM,GAAG;IACb,CAAC;IAEDuB,mBAAmB,CAAClB,IAAI,CAACmB,UAAU,CAAC;EACtC;EAEA,OAAOD,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}